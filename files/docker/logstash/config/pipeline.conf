input {
    udp {
        port => "514"
        type => "syslog"
    }
    udp {
        port => "5514"
        type => "security_flow"
    }
    tcp {
        port => "5000"
        type => "ansible"
        codec => "json"
    }
    http {
        port => 5001
        codec => "json"
        type => "netbox"
    }
}

filter {
    if [type] == "syslog" {
        grok {
            match => [ "message", "%{POSINT:syslog_pri} %{TIMESTAMP_ISO8601:timestamp} %{DATA:hostname} %{DATA:daemon} %{DATA:pid} %{DATA:message_type} %{GREEDYDATA:router_message} "]
        }
    } elseif [type] == "security_flow" {
        grok {
            match => [ "message", '<%{POSINT:syslog_pri}>%{POSINT:session_id} %{TIMESTAMP_ISO8601:timestamp} %{DATA:hostname} %{DATA:message_family} %{DATA:hyphen} %{DATA:message_type} \[%{DATA:dont_care} source-address="%{DATA:source_ip}" source-port="%{DATA:source_port}" destination-address="%{DATA:destination_address}" destination-port="%{INT:destination_port}" connection-tag="%{DATA:connection_tag}" service-name="%{DATA:service_name}" nat-source-address="%{DATA:nat_source_address}" nat-source-port="%{DATA:nat_source_port}" nat-destination-address="%{DATA:nat_destination_address}" nat-destination-port="%{DATA:nat_destination_port}" nat-connection-tag="%{DATA:nat_connection_tag}" src-nat-rule-type="%{DATA:src_nat_rule_type}" src-nat-rule-name="%{DATA:src_nat_rule_nat}" dst-nat-rule-type="%{DATA:dst_nat_rule_type}" dst-nat-rule-name="%{DATA:dst_nat_rule_name}" protocol-id="%{INT:protocol_id}" policy-name="%{DATA:policy_name}" source-zone-name="%{DATA:source_zone_name}" destination-zone-name="%{DATA:destination_zone_name}" session-id-32="%{INT:session_id_32}" username="%{DATA:username}" roles="%{DATA:roles}" packet-incoming-interface="%{DATA:packet_incoming_interface}" application="%{DATA:application}" nested-application="%{DATA:nested_application}" encrypted="%{DATA:encrypted}" application-category="%{DATA:application_category}" application-sub-category="%{DATA:application_sub_category}" application-risk="%{DATA:application_risk}" application-characteristics="%{DATA:application_characteristics}" src-vrf-grp="%{DATA:src_vrf_grp}" dst-vrf-grp="%{DATA:dst_vrf_grp}"]']
        }
    }

    # ### Ansible Callbacks
    if [type] == "ansible" {
        mutate { 
            add_tag => ["ansible"]
        }
    } elseif [type] == "netbox" {
        mutate { 
            add_tag => ["netbox"]
        }
    } elseif [message_type] =~ "^BGP_IO_ERROR_CLOSE_SESSION" {
        mutate {
            add_tag => ["bgp_down"]
        }
    }
}

output {
    # ### PRINT ALL TO SCREEN
    # stdout {}

    # CATCHING ALL PARSE FAILURES
    if "_grokparsefailure" in [tags] {
        file {
            path => "/tmp/fail-%{type}-%{+YYYY.MM.dd}.log"
        }
    }

    # KAFKA TOPIC SECTION
    if "bgp_down" in [tags] {
        kafka {
            codec => json
            bootstrap_servers => "192.168.104.60:9092"
            topic_id => "bgp_down"
        }
        elasticsearch {
            hosts   => ["http://elasticsearch:9200"]
            index   => "bgp_down"
        }
    } elseif "ansible" in [tags] {
        kafka {
            codec => json
            bootstrap_servers => "192.168.104.60:9092"
            topic_id => "ansible_callback"
        }
        elasticsearch {
            hosts   => ["http://elasticsearch:9200"]
            index   => "ansible_callback"
        }
    } elseif "netbox" in [tags] {
        kafka {
            codec => json
            bootstrap_servers => "192.168.104.60:9092"
            topic_id => "netbox"
        }
        elasticsearch {
            hosts   => ["http://elasticsearch:9200"]
            index   => "netbox"
        }
    } else {
        kafka {
            codec => json
            bootstrap_servers => "192.168.104.60:9092"
            topic_id => "all"
        }
        elasticsearch {
            hosts   => ["http://elasticsearch:9200"]
            index   => "all-%{+YYYY.MM.dd}"
        }
    }
}